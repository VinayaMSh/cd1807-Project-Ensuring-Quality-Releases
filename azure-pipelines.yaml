name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- none

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myProject3AgentPool

variables:
  python.version: '3.8.10'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'project3DemoServiceConn'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: '$(System.DefaultWorkingDirectory)'
  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@1
      displayName: Terraform Install
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV4@4
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'Azure subscription 1(bfe3aaca-fcaa-4cf7-8823-0ada2a27d255)'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'udacity-demo3-project'
        backendAzureRmStorageAccountName: 'tfstate183723619'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        
    - task: TerraformTaskV4@4
      displayName: Terraform Validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
      
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'project_demo'
        sshKeySecureFile: 'myApplicationUdacity3-VM_key.pem'
    
    - task: TerraformTaskV4@4
      displayName: Terraform Validate
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'Azure subscription 1(bfe3aaca-fcaa-4cf7-8823-0ada2a27d255)'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'udacity-demo3-project'
        backendAzureRmStorageAccountName: 'tfstate183723619'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
    
   # - task: TerraformTaskV4@4
   #   displayName: Terraform Destroy
   #   inputs:
   #     provider: 'azurerm'
   #     command: 'destroy'
   #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
   #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

   # Postman - Install Newman    
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)

    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'