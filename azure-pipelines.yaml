name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- none

pool: myProject3AgentPool

variables:
  python.version: '3.8.10'
  azureServiceConnectionId: 'project3DemoServiceConn'
  projectRoot: '$(System.DefaultWorkingDirectory)'
  environmentName: 'testEnv'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@1
      displayName: Terraform Install
      inputs:
        terraformVersion: '1.2.9'

    - task: TerraformTaskV4@4
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'Azure subscription 1(bfe3aaca-fcaa-4cf7-8823-0ada2a27d255)'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'udacity-demo3-project'
        backendAzureRmStorageAccountName: 'tfstate183723619'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        
    - task: TerraformTaskV4@4
      displayName: Terraform Validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
      
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'project_demo'
        sshKeySecureFile: 'linuxVMForProject3_key.pem'
    
    - task: TerraformTaskV4@4
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'Azure subscription 1(bfe3aaca-fcaa-4cf7-8823-0ada2a27d255)'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'udacity-demo3-project'
        backendAzureRmStorageAccountName: 'tfstate183723619'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
    
   # - task: TerraformTaskV4@4
   #   displayName: Terraform Destroy
   #   inputs:
   #     provider: 'azurerm'
   #     command: 'destroy'
   #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
   #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

   # Postman - Install Newman    
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
   
    # Postman Data Validation Test Suite    
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run DataValidationTestSuite.json -e Demo3.env.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
     
    # Postman Regression Test Suite    
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run RegressionTestSuite.json -e TestEnv.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    
    # Postman publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'PostmanTests'

    # Selenium (UI) Test Suite - Archive the package  
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium test publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip  
      displayName: 'Upload Package'
      artifact: drop-uitests
      


   
#
        
#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    pool: myProject3AgentPool 
    environment: 'test-vm'
       

 
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  - deployment: VMDeploy
    displayName: Tests
    pool: myProject3AgentPool 
    environment:
      name: 'proj3'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3

            displayName: 'Install selenium dependencies'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                echo '### A manually created VM with already installed Chromedriver######'
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
          
          - download: current
            displayName: 'Download selenium artifact'
            artifact: drop-uitests
          - task: Bash@3
            displayName: UI Tests
            inputs:
              targetType: 'inline'
              script: |
                unzip -o $(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip -d .
                python3 login_add_remove.py  | tee -a /home/azureuser/logs/selenium/output.log.txt
                cat /home/azureuser/logs/selenium/output.log.txt
             
          
         